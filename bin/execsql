#!/usr/bin/env node

var fs = require('fs'),
	_ = require('underscore'),
	execsql = require('..'),
	configFile = __dirname + '/../config.dat',
	argv = require('optimist')
		.boolean('config').alias('c', 'config')
		.boolean('file').alias('f', 'file')
		.boolean('encrypt').alias('e', 'encrypt')
		.argv,
	isConfig = argv['config'],
	isFile = argv['file'],
	config;

if (isConfig) {
  config = {
		server: argv['_'][0],
  	database: argv['_'][1],
  	user: argv['_'][2],
    password: argv['_'][3],
    options: {
      encrypt: argv['encrypt'],
      useColumnNames: true
    }
  };
  console.log( config );
	if (_.some(config, function (val) {
		return val === undefined;
	})) {
		throw new Error('incomplete db config');
	}
	fs.writeFileSync(configFile, JSON.stringify(config));
	console.log('db config has been set');
} else {
	try {
		config = JSON.parse(fs.readFileSync(configFile));
	} catch (err) {
		throw new Error('invalid db config');
	}
	execsql.config( config ).then( () => {
    var doop = null;

    if( isFile ) {
      console.log( 'executing execsql.execFile' );
      doop = execsql.execFile
    } else {
      console.log( 'executing execsql.exec' );
      doop = execsql.exec
    }

    if( doop ) {
      doop( argv['_'][0] ).then( data => {
        let err = data.err;
        let resultsets = data.results.recordsets || null;
        done( err, resultsets );
      })
    }
    
  });
	function done( err, resultsets ) {
    if (err) throw err;
    
    resultsets.forEach( ( resultset, i) => {
      console.log( 'resultset', i );
      resultset.forEach( (result, i) => {
        console.log( JSON.stringify( result ) );
      });
    });

    execsql.end();
		process.exit(0);
	}
}
